/* Auto-generated by genmsg_cpp for file /home/goa-jh/workspace/registration/srv/EvaluationAssumptions.srv */
#ifndef REGISTRATION_SERVICE_EVALUATIONASSUMPTIONS_H
#define REGISTRATION_SERVICE_EVALUATIONASSUMPTIONS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace registration
{
template <class ContainerAllocator>
struct EvaluationAssumptionsRequest_ {
  typedef EvaluationAssumptionsRequest_<ContainerAllocator> Type;

  EvaluationAssumptionsRequest_()
  : transformation()
  {
  }

  EvaluationAssumptionsRequest_(const ContainerAllocator& _alloc)
  : transformation(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _transformation_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  transformation;


  ROS_DEPRECATED uint32_t get_transformation_size() const { return (uint32_t)transformation.size(); }
  ROS_DEPRECATED void set_transformation_size(uint32_t size) { transformation.resize((size_t)size); }
  ROS_DEPRECATED void get_transformation_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->transformation; }
  ROS_DEPRECATED void set_transformation_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->transformation = vec; }
private:
  static const char* __s_getDataType_() { return "registration/EvaluationAssumptionsRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "5bf915ec6a3423e9a67a924943e4ba26"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "626236ec60cdef9acadc5e978b9f804c"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64[] transformation\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, transformation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, transformation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(transformation);
    return size;
  }

  typedef boost::shared_ptr< ::registration::EvaluationAssumptionsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::registration::EvaluationAssumptionsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EvaluationAssumptionsRequest
typedef  ::registration::EvaluationAssumptionsRequest_<std::allocator<void> > EvaluationAssumptionsRequest;

typedef boost::shared_ptr< ::registration::EvaluationAssumptionsRequest> EvaluationAssumptionsRequestPtr;
typedef boost::shared_ptr< ::registration::EvaluationAssumptionsRequest const> EvaluationAssumptionsRequestConstPtr;


template <class ContainerAllocator>
struct EvaluationAssumptionsResponse_ {
  typedef EvaluationAssumptionsResponse_<ContainerAllocator> Type;

  EvaluationAssumptionsResponse_()
  : success(0)
  {
  }

  EvaluationAssumptionsResponse_(const ContainerAllocator& _alloc)
  : success(0)
  {
  }

  typedef int64_t _success_type;
  int64_t success;


private:
  static const char* __s_getDataType_() { return "registration/EvaluationAssumptionsResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0f26af2399fbfbc8170d9a60ed7b9846"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "626236ec60cdef9acadc5e978b9f804c"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int64 success\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::registration::EvaluationAssumptionsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::registration::EvaluationAssumptionsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EvaluationAssumptionsResponse
typedef  ::registration::EvaluationAssumptionsResponse_<std::allocator<void> > EvaluationAssumptionsResponse;

typedef boost::shared_ptr< ::registration::EvaluationAssumptionsResponse> EvaluationAssumptionsResponsePtr;
typedef boost::shared_ptr< ::registration::EvaluationAssumptionsResponse const> EvaluationAssumptionsResponseConstPtr;

struct EvaluationAssumptions
{

typedef EvaluationAssumptionsRequest Request;
typedef EvaluationAssumptionsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct EvaluationAssumptions
} // namespace registration

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::registration::EvaluationAssumptionsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::registration::EvaluationAssumptionsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::registration::EvaluationAssumptionsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5bf915ec6a3423e9a67a924943e4ba26";
  }

  static const char* value(const  ::registration::EvaluationAssumptionsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5bf915ec6a3423e9ULL;
  static const uint64_t static_value2 = 0xa67a924943e4ba26ULL;
};

template<class ContainerAllocator>
struct DataType< ::registration::EvaluationAssumptionsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "registration/EvaluationAssumptionsRequest";
  }

  static const char* value(const  ::registration::EvaluationAssumptionsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::registration::EvaluationAssumptionsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] transformation\n\
\n\
";
  }

  static const char* value(const  ::registration::EvaluationAssumptionsRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::registration::EvaluationAssumptionsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::registration::EvaluationAssumptionsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::registration::EvaluationAssumptionsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0f26af2399fbfbc8170d9a60ed7b9846";
  }

  static const char* value(const  ::registration::EvaluationAssumptionsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0f26af2399fbfbc8ULL;
  static const uint64_t static_value2 = 0x170d9a60ed7b9846ULL;
};

template<class ContainerAllocator>
struct DataType< ::registration::EvaluationAssumptionsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "registration/EvaluationAssumptionsResponse";
  }

  static const char* value(const  ::registration::EvaluationAssumptionsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::registration::EvaluationAssumptionsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 success\n\
\n\
\n\
";
  }

  static const char* value(const  ::registration::EvaluationAssumptionsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::registration::EvaluationAssumptionsResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::registration::EvaluationAssumptionsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.transformation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EvaluationAssumptionsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::registration::EvaluationAssumptionsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EvaluationAssumptionsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<registration::EvaluationAssumptions> {
  static const char* value() 
  {
    return "626236ec60cdef9acadc5e978b9f804c";
  }

  static const char* value(const registration::EvaluationAssumptions&) { return value(); } 
};

template<>
struct DataType<registration::EvaluationAssumptions> {
  static const char* value() 
  {
    return "registration/EvaluationAssumptions";
  }

  static const char* value(const registration::EvaluationAssumptions&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<registration::EvaluationAssumptionsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "626236ec60cdef9acadc5e978b9f804c";
  }

  static const char* value(const registration::EvaluationAssumptionsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<registration::EvaluationAssumptionsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "registration/EvaluationAssumptions";
  }

  static const char* value(const registration::EvaluationAssumptionsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<registration::EvaluationAssumptionsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "626236ec60cdef9acadc5e978b9f804c";
  }

  static const char* value(const registration::EvaluationAssumptionsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<registration::EvaluationAssumptionsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "registration/EvaluationAssumptions";
  }

  static const char* value(const registration::EvaluationAssumptionsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // REGISTRATION_SERVICE_EVALUATIONASSUMPTIONS_H

