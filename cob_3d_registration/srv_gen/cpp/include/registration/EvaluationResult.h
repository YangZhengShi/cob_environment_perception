/* Auto-generated by genmsg_cpp for file /home/goa-jh/workspace/registration/srv/EvaluationResult.srv */
#ifndef REGISTRATION_SERVICE_EVALUATIONRESULT_H
#define REGISTRATION_SERVICE_EVALUATIONRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace registration
{
template <class ContainerAllocator>
struct EvaluationResultRequest_ {
  typedef EvaluationResultRequest_<ContainerAllocator> Type;

  EvaluationResultRequest_()
  : duration(0.0)
  , memory(0)
  , state(false)
  , transformation()
  {
  }

  EvaluationResultRequest_(const ContainerAllocator& _alloc)
  : duration(0.0)
  , memory(0)
  , state(false)
  , transformation(_alloc)
  {
  }

  typedef double _duration_type;
  double duration;

  typedef int64_t _memory_type;
  int64_t memory;

  typedef uint8_t _state_type;
  uint8_t state;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _transformation_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  transformation;


  ROS_DEPRECATED uint32_t get_transformation_size() const { return (uint32_t)transformation.size(); }
  ROS_DEPRECATED void set_transformation_size(uint32_t size) { transformation.resize((size_t)size); }
  ROS_DEPRECATED void get_transformation_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->transformation; }
  ROS_DEPRECATED void set_transformation_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->transformation = vec; }
private:
  static const char* __s_getDataType_() { return "registration/EvaluationResultRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "37bb6350972b914a2d9b4709d41943cd"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "a6e0d8a505a344b10a76bd984ce24d22"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 duration\n\
int64 memory\n\
bool state\n\
float64[] transformation\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, duration);
    ros::serialization::serialize(stream, memory);
    ros::serialization::serialize(stream, state);
    ros::serialization::serialize(stream, transformation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, duration);
    ros::serialization::deserialize(stream, memory);
    ros::serialization::deserialize(stream, state);
    ros::serialization::deserialize(stream, transformation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(duration);
    size += ros::serialization::serializationLength(memory);
    size += ros::serialization::serializationLength(state);
    size += ros::serialization::serializationLength(transformation);
    return size;
  }

  typedef boost::shared_ptr< ::registration::EvaluationResultRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::registration::EvaluationResultRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EvaluationResultRequest
typedef  ::registration::EvaluationResultRequest_<std::allocator<void> > EvaluationResultRequest;

typedef boost::shared_ptr< ::registration::EvaluationResultRequest> EvaluationResultRequestPtr;
typedef boost::shared_ptr< ::registration::EvaluationResultRequest const> EvaluationResultRequestConstPtr;


template <class ContainerAllocator>
struct EvaluationResultResponse_ {
  typedef EvaluationResultResponse_<ContainerAllocator> Type;

  EvaluationResultResponse_()
  : success(0)
  {
  }

  EvaluationResultResponse_(const ContainerAllocator& _alloc)
  : success(0)
  {
  }

  typedef int64_t _success_type;
  int64_t success;


private:
  static const char* __s_getDataType_() { return "registration/EvaluationResultResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0f26af2399fbfbc8170d9a60ed7b9846"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "a6e0d8a505a344b10a76bd984ce24d22"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int64 success\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::registration::EvaluationResultResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::registration::EvaluationResultResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EvaluationResultResponse
typedef  ::registration::EvaluationResultResponse_<std::allocator<void> > EvaluationResultResponse;

typedef boost::shared_ptr< ::registration::EvaluationResultResponse> EvaluationResultResponsePtr;
typedef boost::shared_ptr< ::registration::EvaluationResultResponse const> EvaluationResultResponseConstPtr;

struct EvaluationResult
{

typedef EvaluationResultRequest Request;
typedef EvaluationResultResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct EvaluationResult
} // namespace registration

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::registration::EvaluationResultRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::registration::EvaluationResultRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::registration::EvaluationResultRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "37bb6350972b914a2d9b4709d41943cd";
  }

  static const char* value(const  ::registration::EvaluationResultRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x37bb6350972b914aULL;
  static const uint64_t static_value2 = 0x2d9b4709d41943cdULL;
};

template<class ContainerAllocator>
struct DataType< ::registration::EvaluationResultRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "registration/EvaluationResultRequest";
  }

  static const char* value(const  ::registration::EvaluationResultRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::registration::EvaluationResultRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 duration\n\
int64 memory\n\
bool state\n\
float64[] transformation\n\
\n\
";
  }

  static const char* value(const  ::registration::EvaluationResultRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::registration::EvaluationResultResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::registration::EvaluationResultResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::registration::EvaluationResultResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0f26af2399fbfbc8170d9a60ed7b9846";
  }

  static const char* value(const  ::registration::EvaluationResultResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0f26af2399fbfbc8ULL;
  static const uint64_t static_value2 = 0x170d9a60ed7b9846ULL;
};

template<class ContainerAllocator>
struct DataType< ::registration::EvaluationResultResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "registration/EvaluationResultResponse";
  }

  static const char* value(const  ::registration::EvaluationResultResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::registration::EvaluationResultResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 success\n\
\n\
\n\
";
  }

  static const char* value(const  ::registration::EvaluationResultResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::registration::EvaluationResultResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::registration::EvaluationResultRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.duration);
    stream.next(m.memory);
    stream.next(m.state);
    stream.next(m.transformation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EvaluationResultRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::registration::EvaluationResultResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EvaluationResultResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<registration::EvaluationResult> {
  static const char* value() 
  {
    return "a6e0d8a505a344b10a76bd984ce24d22";
  }

  static const char* value(const registration::EvaluationResult&) { return value(); } 
};

template<>
struct DataType<registration::EvaluationResult> {
  static const char* value() 
  {
    return "registration/EvaluationResult";
  }

  static const char* value(const registration::EvaluationResult&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<registration::EvaluationResultRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a6e0d8a505a344b10a76bd984ce24d22";
  }

  static const char* value(const registration::EvaluationResultRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<registration::EvaluationResultRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "registration/EvaluationResult";
  }

  static const char* value(const registration::EvaluationResultRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<registration::EvaluationResultResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a6e0d8a505a344b10a76bd984ce24d22";
  }

  static const char* value(const registration::EvaluationResultResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<registration::EvaluationResultResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "registration/EvaluationResult";
  }

  static const char* value(const registration::EvaluationResultResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // REGISTRATION_SERVICE_EVALUATIONRESULT_H

