/* Auto-generated by genmsg_cpp for file /home/goa-jh/git/cob_environment_perception_intern/cob_3d_registration/srv/RegistrationPCD.srv */
#ifndef COB_3D_REGISTRATION_SERVICE_REGISTRATIONPCD_H
#define COB_3D_REGISTRATION_SERVICE_REGISTRATIONPCD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace cob_3d_registration
{
template <class ContainerAllocator>
struct RegistrationPCDRequest_ {
  typedef RegistrationPCDRequest_<ContainerAllocator> Type;

  RegistrationPCDRequest_()
  : pcd_fn()
  , img_fn()
  , depth_img_fn()
  {
  }

  RegistrationPCDRequest_(const ContainerAllocator& _alloc)
  : pcd_fn(_alloc)
  , img_fn(_alloc)
  , depth_img_fn(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pcd_fn_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  pcd_fn;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _img_fn_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  img_fn;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _depth_img_fn_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  depth_img_fn;


private:
  static const char* __s_getDataType_() { return "cob_3d_registration/RegistrationPCDRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "332d97b088111feb149b0203283297e7"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "557fdc13782bfc93783b1523e234caa8"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string pcd_fn\n\
string img_fn\n\
string depth_img_fn\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, pcd_fn);
    ros::serialization::serialize(stream, img_fn);
    ros::serialization::serialize(stream, depth_img_fn);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, pcd_fn);
    ros::serialization::deserialize(stream, img_fn);
    ros::serialization::deserialize(stream, depth_img_fn);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(pcd_fn);
    size += ros::serialization::serializationLength(img_fn);
    size += ros::serialization::serializationLength(depth_img_fn);
    return size;
  }

  typedef boost::shared_ptr< ::cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RegistrationPCDRequest
typedef  ::cob_3d_registration::RegistrationPCDRequest_<std::allocator<void> > RegistrationPCDRequest;

typedef boost::shared_ptr< ::cob_3d_registration::RegistrationPCDRequest> RegistrationPCDRequestPtr;
typedef boost::shared_ptr< ::cob_3d_registration::RegistrationPCDRequest const> RegistrationPCDRequestConstPtr;


template <class ContainerAllocator>
struct RegistrationPCDResponse_ {
  typedef RegistrationPCDResponse_<ContainerAllocator> Type;

  RegistrationPCDResponse_()
  : success(0)
  {
  }

  RegistrationPCDResponse_(const ContainerAllocator& _alloc)
  : success(0)
  {
  }

  typedef int64_t _success_type;
  int64_t success;


private:
  static const char* __s_getDataType_() { return "cob_3d_registration/RegistrationPCDResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0f26af2399fbfbc8170d9a60ed7b9846"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "557fdc13782bfc93783b1523e234caa8"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int64 success\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RegistrationPCDResponse
typedef  ::cob_3d_registration::RegistrationPCDResponse_<std::allocator<void> > RegistrationPCDResponse;

typedef boost::shared_ptr< ::cob_3d_registration::RegistrationPCDResponse> RegistrationPCDResponsePtr;
typedef boost::shared_ptr< ::cob_3d_registration::RegistrationPCDResponse const> RegistrationPCDResponseConstPtr;

struct RegistrationPCD
{

typedef RegistrationPCDRequest Request;
typedef RegistrationPCDResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct RegistrationPCD
} // namespace cob_3d_registration

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "332d97b088111feb149b0203283297e7";
  }

  static const char* value(const  ::cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x332d97b088111febULL;
  static const uint64_t static_value2 = 0x149b0203283297e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_3d_registration/RegistrationPCDRequest";
  }

  static const char* value(const  ::cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string pcd_fn\n\
string img_fn\n\
string depth_img_fn\n\
\n\
";
  }

  static const char* value(const  ::cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0f26af2399fbfbc8170d9a60ed7b9846";
  }

  static const char* value(const  ::cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0f26af2399fbfbc8ULL;
  static const uint64_t static_value2 = 0x170d9a60ed7b9846ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_3d_registration/RegistrationPCDResponse";
  }

  static const char* value(const  ::cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 success\n\
\n\
\n\
";
  }

  static const char* value(const  ::cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pcd_fn);
    stream.next(m.img_fn);
    stream.next(m.depth_img_fn);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RegistrationPCDRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RegistrationPCDResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cob_3d_registration::RegistrationPCD> {
  static const char* value() 
  {
    return "557fdc13782bfc93783b1523e234caa8";
  }

  static const char* value(const cob_3d_registration::RegistrationPCD&) { return value(); } 
};

template<>
struct DataType<cob_3d_registration::RegistrationPCD> {
  static const char* value() 
  {
    return "cob_3d_registration/RegistrationPCD";
  }

  static const char* value(const cob_3d_registration::RegistrationPCD&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "557fdc13782bfc93783b1523e234caa8";
  }

  static const char* value(const cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_3d_registration/RegistrationPCD";
  }

  static const char* value(const cob_3d_registration::RegistrationPCDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "557fdc13782bfc93783b1523e234caa8";
  }

  static const char* value(const cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_3d_registration/RegistrationPCD";
  }

  static const char* value(const cob_3d_registration::RegistrationPCDResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COB_3D_REGISTRATION_SERVICE_REGISTRATIONPCD_H

