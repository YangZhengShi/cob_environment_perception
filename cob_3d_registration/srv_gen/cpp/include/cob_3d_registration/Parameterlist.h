/* Auto-generated by genmsg_cpp for file /home/goa-jh/git/cob_environment_perception_intern/cob_3d_registration/srv/Parameterlist.srv */
#ifndef COB_3D_REGISTRATION_SERVICE_PARAMETERLIST_H
#define COB_3D_REGISTRATION_SERVICE_PARAMETERLIST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace cob_3d_registration
{
template <class ContainerAllocator>
struct ParameterlistRequest_ {
  typedef ParameterlistRequest_<ContainerAllocator> Type;

  ParameterlistRequest_()
  : names()
  , values()
  , types()
  {
  }

  ParameterlistRequest_(const ContainerAllocator& _alloc)
  : names(_alloc)
  , values(_alloc)
  , types(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  names;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _values_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  values;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _types_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  types;


  ROS_DEPRECATED uint32_t get_names_size() const { return (uint32_t)names.size(); }
  ROS_DEPRECATED void set_names_size(uint32_t size) { names.resize((size_t)size); }
  ROS_DEPRECATED void get_names_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->names; }
  ROS_DEPRECATED void set_names_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->names = vec; }
  ROS_DEPRECATED uint32_t get_values_size() const { return (uint32_t)values.size(); }
  ROS_DEPRECATED void set_values_size(uint32_t size) { values.resize((size_t)size); }
  ROS_DEPRECATED void get_values_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->values; }
  ROS_DEPRECATED void set_values_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->values = vec; }
  ROS_DEPRECATED uint32_t get_types_size() const { return (uint32_t)types.size(); }
  ROS_DEPRECATED void set_types_size(uint32_t size) { types.resize((size_t)size); }
  ROS_DEPRECATED void get_types_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->types; }
  ROS_DEPRECATED void set_types_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->types = vec; }
private:
  static const char* __s_getDataType_() { return "cob_3d_registration/ParameterlistRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b4aad5f78eda10079d708a8d4b303dba"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "b53ad76a356e707c7b3aa8a4b8e9a778"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string[] names\n\
string[] values\n\
string[] types\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, names);
    ros::serialization::serialize(stream, values);
    ros::serialization::serialize(stream, types);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, names);
    ros::serialization::deserialize(stream, values);
    ros::serialization::deserialize(stream, types);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(names);
    size += ros::serialization::serializationLength(values);
    size += ros::serialization::serializationLength(types);
    return size;
  }

  typedef boost::shared_ptr< ::cob_3d_registration::ParameterlistRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_3d_registration::ParameterlistRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ParameterlistRequest
typedef  ::cob_3d_registration::ParameterlistRequest_<std::allocator<void> > ParameterlistRequest;

typedef boost::shared_ptr< ::cob_3d_registration::ParameterlistRequest> ParameterlistRequestPtr;
typedef boost::shared_ptr< ::cob_3d_registration::ParameterlistRequest const> ParameterlistRequestConstPtr;


template <class ContainerAllocator>
struct ParameterlistResponse_ {
  typedef ParameterlistResponse_<ContainerAllocator> Type;

  ParameterlistResponse_()
  : success(0)
  {
  }

  ParameterlistResponse_(const ContainerAllocator& _alloc)
  : success(0)
  {
  }

  typedef int64_t _success_type;
  int64_t success;


private:
  static const char* __s_getDataType_() { return "cob_3d_registration/ParameterlistResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0f26af2399fbfbc8170d9a60ed7b9846"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "b53ad76a356e707c7b3aa8a4b8e9a778"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int64 success\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::cob_3d_registration::ParameterlistResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_3d_registration::ParameterlistResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ParameterlistResponse
typedef  ::cob_3d_registration::ParameterlistResponse_<std::allocator<void> > ParameterlistResponse;

typedef boost::shared_ptr< ::cob_3d_registration::ParameterlistResponse> ParameterlistResponsePtr;
typedef boost::shared_ptr< ::cob_3d_registration::ParameterlistResponse const> ParameterlistResponseConstPtr;

struct Parameterlist
{

typedef ParameterlistRequest Request;
typedef ParameterlistResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Parameterlist
} // namespace cob_3d_registration

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cob_3d_registration::ParameterlistRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cob_3d_registration::ParameterlistRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cob_3d_registration::ParameterlistRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b4aad5f78eda10079d708a8d4b303dba";
  }

  static const char* value(const  ::cob_3d_registration::ParameterlistRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb4aad5f78eda1007ULL;
  static const uint64_t static_value2 = 0x9d708a8d4b303dbaULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_3d_registration::ParameterlistRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_3d_registration/ParameterlistRequest";
  }

  static const char* value(const  ::cob_3d_registration::ParameterlistRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_3d_registration::ParameterlistRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] names\n\
string[] values\n\
string[] types\n\
\n\
";
  }

  static const char* value(const  ::cob_3d_registration::ParameterlistRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cob_3d_registration::ParameterlistResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cob_3d_registration::ParameterlistResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cob_3d_registration::ParameterlistResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0f26af2399fbfbc8170d9a60ed7b9846";
  }

  static const char* value(const  ::cob_3d_registration::ParameterlistResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0f26af2399fbfbc8ULL;
  static const uint64_t static_value2 = 0x170d9a60ed7b9846ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_3d_registration::ParameterlistResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_3d_registration/ParameterlistResponse";
  }

  static const char* value(const  ::cob_3d_registration::ParameterlistResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_3d_registration::ParameterlistResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 success\n\
\n\
\n\
";
  }

  static const char* value(const  ::cob_3d_registration::ParameterlistResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_3d_registration::ParameterlistResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_3d_registration::ParameterlistRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.names);
    stream.next(m.values);
    stream.next(m.types);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ParameterlistRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_3d_registration::ParameterlistResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ParameterlistResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cob_3d_registration::Parameterlist> {
  static const char* value() 
  {
    return "b53ad76a356e707c7b3aa8a4b8e9a778";
  }

  static const char* value(const cob_3d_registration::Parameterlist&) { return value(); } 
};

template<>
struct DataType<cob_3d_registration::Parameterlist> {
  static const char* value() 
  {
    return "cob_3d_registration/Parameterlist";
  }

  static const char* value(const cob_3d_registration::Parameterlist&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_3d_registration::ParameterlistRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b53ad76a356e707c7b3aa8a4b8e9a778";
  }

  static const char* value(const cob_3d_registration::ParameterlistRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_3d_registration::ParameterlistRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_3d_registration/Parameterlist";
  }

  static const char* value(const cob_3d_registration::ParameterlistRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_3d_registration::ParameterlistResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b53ad76a356e707c7b3aa8a4b8e9a778";
  }

  static const char* value(const cob_3d_registration::ParameterlistResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_3d_registration::ParameterlistResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_3d_registration/Parameterlist";
  }

  static const char* value(const cob_3d_registration::ParameterlistResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COB_3D_REGISTRATION_SERVICE_PARAMETERLIST_H

