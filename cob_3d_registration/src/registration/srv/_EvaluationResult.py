"""autogenerated by genmsg_py from EvaluationResultRequest.msg. Do not edit."""
import roslib.message
import struct


class EvaluationResultRequest(roslib.message.Message):
  _md5sum = "37bb6350972b914a2d9b4709d41943cd"
  _type = "registration/EvaluationResultRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 duration
int64 memory
bool state
float64[] transformation

"""
  __slots__ = ['duration','memory','state','transformation']
  _slot_types = ['float64','int64','bool','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       duration,memory,state,transformation
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(EvaluationResultRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.duration is None:
        self.duration = 0.
      if self.memory is None:
        self.memory = 0
      if self.state is None:
        self.state = False
      if self.transformation is None:
        self.transformation = []
    else:
      self.duration = 0.
      self.memory = 0
      self.state = False
      self.transformation = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_dqB.pack(_x.duration, _x.memory, _x.state))
      length = len(self.transformation)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.transformation))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.duration, _x.memory, _x.state,) = _struct_dqB.unpack(str[start:end])
      self.state = bool(self.state)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.transformation = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_dqB.pack(_x.duration, _x.memory, _x.state))
      length = len(self.transformation)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.transformation.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.duration, _x.memory, _x.state,) = _struct_dqB.unpack(str[start:end])
      self.state = bool(self.state)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.transformation = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_dqB = struct.Struct("<dqB")
"""autogenerated by genmsg_py from EvaluationResultResponse.msg. Do not edit."""
import roslib.message
import struct


class EvaluationResultResponse(roslib.message.Message):
  _md5sum = "0f26af2399fbfbc8170d9a60ed7b9846"
  _type = "registration/EvaluationResultResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 success


"""
  __slots__ = ['success']
  _slot_types = ['int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       success
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(EvaluationResultResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = 0
    else:
      self.success = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_q.pack(self.success))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 8
      (self.success,) = _struct_q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_q.pack(self.success))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 8
      (self.success,) = _struct_q.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_q = struct.Struct("<q")
class EvaluationResult(roslib.message.ServiceDefinition):
  _type          = 'registration/EvaluationResult'
  _md5sum = 'a6e0d8a505a344b10a76bd984ce24d22'
  _request_class  = EvaluationResultRequest
  _response_class = EvaluationResultResponse
